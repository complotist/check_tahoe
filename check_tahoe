#!/usr/bin/env python3

import requests
import json
import argparse
import sys
import datetime

"""
{
  "storage_server.disk_used": 5651529728,
  "storage_server.accepting_immutable_shares": 1,
  "storage_server.disk_free_for_root": 14319382528,
  "storage_server.reserved_space": 5000000000,
  "node.uptime": 30641.95401597023,
  "storage_server.disk_total": 19970912256,
  "cpu_monitor.1min_avg": 0.0011507321993287668,
  "cpu_monitor.total": 24.312748,
  "storage_server.disk_avail": 8456601088,
  "storage_server.allocated": 0,
  "storage_server.disk_free_for_nonroot": 13456601088,
  "storage_server.total_bucket_count": 2368,
  "cpu_monitor.15min_avg": 0.0005879445626603004,
  "cpu_monitor.5min_avg": 0.0006072772453287527
}
"""

if __name__ == '__main__':

	parser = argparse.ArgumentParser()
	parser.add_argument('--scheme', help="scheme to use (default: http)", type=str, default='http', required=False)
	parser.add_argument('--hostname', help="tahoe hostname (default: 127.0.0.1)", type=str, default='127.0.0.1', required=False)
	parser.add_argument('--port', help="tahoe port (default: 3456)", type=int, default=3456, required=False)
	parser.add_argument('--stats', help="stats uri (default: statistics?t=json)", default="statistics?t=json", required=False)
	parser.add_argument('--cpu_warning', help="warning value for cpu usage (default: 0.7)", type=int, default=0.7, required=False)
	parser.add_argument('--cpu_critical', help="critical value for cpu usage (default: 0.9)", type=int, default=0.9, required=False)
	parser.add_argument('--disk_critical', help="critical value for disk usage (default: 5%)", type=int, default=5, required=False)
	parser.add_argument('--disk_warning', help="warning value for disk usage (default: 10%)", type=int, default=10, required=False)
	args = parser.parse_args()

	try:
		res = requests.get('%s://%s:%d/%s' % (args.scheme, args.hostname, args.port, args.stats))
	except Exception as e:
		print(e)
		sys.exit(3)

	js = json.loads(res.text)
	ecode = 0

	# default counts
	counts = {
		'warning': {},
		'critical': {}
	}

	# base infos
	data = [
		'uptime: %s' % datetime.timedelta(seconds=round(js['stats']['node.uptime'])),
		'buckets: %s' % js['stats']['storage_server.total_bucket_count'],
	]

	# check cpu
	cpu = js['stats']['cpu_monitor.1min_avg']
	if cpu > args.cpu_critical: counts['critical']['cpu'] = round(cpu, 6)
	elif cpu > args.cpu_warning: counts['warning']['cpu'] = round(cpu, 6)
	else: data.append('cpu: %s' % round(cpu,6))

	# check space
	disk_space_total = js['stats']['storage_server.disk_total']
	disk_space_reserved = js['stats']['storage_server.reserved_space']
	disk_space_usable = disk_space_total - disk_space_reserved 
	disk_space_avail = js['stats']['storage_server.disk_avail']
	free_percent = (disk_space_avail/disk_space_usable) * 100

	if free_percent < args.disk_critical:
		ecode = 2 if ecode < 2 else ecode
		counts['critical']['disk_free'] = '%s%%' % round(free_percent, 3)
	elif free_percent < args.disk_warning:
		ecode = 1 if ecode < 1 else ecode
		counts['warning']['disk_free'] = '%s%%' % round(free_percent, 3)
	else:
		data.append('disk_free: %s%%' % round(free_percent, 3))

	# show global informations
	print(', '.join( data ))

	# show warning
	if len(counts['warning']) > 0:
		ecode = 1 if ecode < 1 else ecode
		print('WARNING: %s' % ' | '.join( [ '%s: %s' % (foo, counts['warning'][foo]) for foo in counts['warning'].keys() ] ))

	# show crits
	if len(counts['critical']) > 0:
		ecode = 2 if ecode < 2 else ecode
		print('CRITICAL: %s' % ' | '.join( [ '%s: %s' % (foo, counts['critical'][foo]) for foo in counts['critical'].keys() ] ))

	sys.exit(ecode)
